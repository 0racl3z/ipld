-- comment --
	This is a set of fixtures for selectors.

	All of these fixtures are single blocks -- no links.

	Walking will be exercised;
	determinism of order will be exercised;
	and matching vs exploration distinctions will be exercised.

	Each fixture will have the following "files":
	  - description -- it's freetext.
	  - data.json -- this is the "block".  It's arbitrary example data.  They're all in json (or dag-json) format, for simplicity.
	  - selector.json -- this is the selector.  Again, as json.
	  - expect-visit.jsonl -- these are json lines (one json object on each line) containing description of each node that should be visited, in order.

	To test your selector implementation,
	first parse the data (this is just a prerequisite; parsing this should already be known to work);
	then parse the selector (this should succeed -- there are no trick documents here that should fail to parse as selectors);
	then evaluate the selector on the data...
	and each step of the selection process should match exactly one line in the expect-visit file.



-- single-node/description --
	This test just matches a single node.
-- single-node/data.json --
	"basic test"
-- single-node/selector.json --
	{
		".": {}
	}
-- single-node/expect-visit.jsonl --
	{"path": "", "node": {"string": "basic test"}, "matched": true}



-- simple-map/description --
	This test matches on a small map.
	It doesn't recurse; it just matches one element.

	Note that in the expectation data, it's we say there's a map kind node,
	but just "null" as the value; this is to avoid making the data oversized and redundant.
-- simple-map/data.json --
	{
		"foo": true,
		"other": {}
	}
-- simple-map/selector.json --
	{
		".": {}
	}
-- simple-map/expect-visit.jsonl --
	{"path": "", "node": {"map": null}, "matched": true}



-- explore-fields/description --
	This test takes several steps over a small map.
	So, it's our first fixture that's actually going to have several entries in the visit expectations list!

	But, note that it does not touch every entry in the map --
	with a "fields" selector, the traverse only touches what's explicitly described.

	Also notice that this selector traverses the map node during its exploration,
	but does *not* match the map node itself --
	while it *does* match the fields.
-- explore-fields/data.json --
	{
		"bar": false,
		"foo": true,
		"some_other": {}
	}
-- explore-fields/selector.json --
	{
		"f": {
			"f>": {
				"foo": {
					".": {}
				},
				"bar": {
					".": {}
				}
			}
		}
	}
-- explore-fields/expect-visit.jsonl --
	{"path": "",    "node": {"map": null}, "matched": false}
	{"path": "foo", "node": {"bool": true}, "matched": true}
	{"path": "bar", "node": {"bool": false}, "matched": true}



-- explore-fields-nested/description --
	This test is similar to the previous fixture,
	but shows how selector clauses can be nested.
-- explore-fields-nested/data.json --
	{
		"nested": {
			"n": 8
		},
		"foo": true,
		"bar": 5
	}
-- explore-fields-nested/selector.json --
	{
		"f": {
			"f>": {
				"foo": {
					".": {}
				},
				"nested": {
					"f": {
						"f>": {
							"n": {
								".": {}
							}
						}
					}
				}
			}
		}
	}
-- explore-fields-nested/expect-visit.jsonl --
	{"path": "", "node": {"map": null}, "matched": false}
	{"path": "foo", "node": {"bool": true}, "matched": true}
	{"path": "nested", "node": {"map": null}, "matched": false}
	{"path": "nested/n", "node": {"integer": 8}, "matched": true}



-- explore-index/description --
	Exploration can also be done over indexes of lists.
-- explore-index/data.json --
	[
		"0",
		"1",
		"2"
	]
-- explore-index/selector.json --
	{
		"i": {
			"i": 1,
			">": {
				".": {}
			}
		}
	}
-- explore-index/expect-visit.jsonl --
	{"path": "", "node": {"list": null}, "matched": false}
	{"path": "1", "node": {"string": "1"}, "matched": true}



-- explore-range/description --
	Another form of selector clause can specify ranges over lists.
-- explore-range/data.json --
	[
		0,
		null,
		"s",
		{}
	]
-- explore-range/selector.json --
	{
		"r": {
			"^": 1,
			"$": 3,
			">": {
				".": {}
			}
		}
	}
-- explore-range/expect-visit.jsonl --
	{"path": "", "node": {"list": null}, "matched": false}
	{"path": "1", "node": {"null": null}, "matched": true}
	{"path": "2", "node": {"string": "s"}, "matched": true}



-- hello-recursion/description --
	Selectors have a recursion clause!
	More selector clauses can be placed inside the recursion clause...
	and then, eventually, a recursion stop clause, which will cause the selection process
	to jump back to the recursion start marker.

	This recursion uses an ExploreAll clause, so it's sort of like a wildcard match.

	Recursive selectors have a depth limit.
	On this data, we'll reach the depth limit before we explore all of the data,
	so notice how the expectation list for visits is relatively short.

	Note that there's no actual matcher clause anywhere in this selector.
	That means this selector will still explore and visit a lot of nodes,
	but none of them are considered to "match".
-- hello-recursion/data.json --
	[
		{
			"one": [
				{
					"two": [
						3
					]
				}
			]
		}
	]
-- hello-recursion/selector.json --
	{
		"R": {
			"l": {
				"depth": 4
			},
			":>": {
				"a": {
					">": {
						"@": {}
					}
				}
			}
		}
	}
-- hello-recursion/expect-visit.jsonl --
	{"path": "", "node": {"list": null}, "matched": false}
	{"path": "0", "node": {"map": null}, "matched": false}
	{"path": "0/one", "node": {"list": null}, "matched": false}
	{"path": "0/one/0", "node": {"map": null}, "matched": false}
