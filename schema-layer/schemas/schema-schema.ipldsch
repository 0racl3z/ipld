## -----
## This is the schema describing the schema declarations for IPLD Schemas.
## Yes, it's self-describing! :)
## -----

## Type names are a simple alias of string.
##
## There are some additional rules that should be applied:
##   - Type names should by convention begin with a capital letter;
##   - Type names must be all printable characters (no whitespace);
##   - Type names must not contain punctuation (dashes, dots, etc).
##
## Type names are strings meant for human consumption at a local scope.
## When making a Schema, note that the TypeName is the key of the map:
## a TypeName must be unique within the Schema.
##
type TypeName string

## SchemaMap is a complete set of types;
## it is simply a map of TypeName to detailed declaration of that Type.
##
## A simple schema map with one type might look like this:
##
## ```
## {
##   "TypeFoo": {
##     "type": "string"
##   }
## }
## ```
##
type SchemaMap map {TypeName:Type}

## Schema is a single-member union, which can be used in serialization
## to make a form of "nominative type declaration".
##
## A complete Schema might look like this:
##
## ```
## {
##   "schema": {
##     "TypeFoo": {
##       "type": "string"
##     }
##   }
## }
## ```
##
type Schema union {
	| SchemaMap "schema"
} representation keyed

## The types of Type are a union.
##
## The Type union is serialized using "inline" union representation,
## which means all of its members have map representations, and there will be
## an entry in that map called "type" which contains the union discriminator.
##
## Some of the kinds of type are so simple the union discriminator is the only
## content at all, e.g. strings:
##
## ```
## {
##   "type": "string"
## }
## ```
##
## Other types have more content.  Consider this example of a map type:
##
## ```
## {
##   "type": "map",
##   "keyType": "String",
##   "valueType": "Int"
## }
## ```
##
type Type union {
	| TypeBool "bool"
	| TypeString "string"
	| TypeBytes "bytes"
	| TypeInt "int"
	| TypeFloat "float"
	| TypeMap "map"
	| TypeList "list"
	| TypeLink "link"
	| TypeUnion "union"
	| TypeStruct "struct"
	| TypeEnum "enum"
} representation inline "type"

## TypeKind enumerates all the major kinds of type.
## Notice this enum's members are the same as the set of strings used as
## discriminants in the Type union.
##
## TODO: not actually sure we'll need to declare this.  Only usage is
## in the Type union representation details?
type TypeKind enum {
	| "bool"
	| "string"
	| "bytes"
	| "int"
	| "float"
	| "map"
	| "list"
	| "link"
	| "union"
	| "struct"
	| "enum"
}

## RepresentationKind is similar to TypeKind, but includes only those concepts
## which exist at the IPLD *Data Model* level.
##
## In other words, structs, unions, and enumerations are not present:
## those concepts are introduced in the IPLD Schema system, and when serialized,
## all of them must be transformable to one of these representation kinds
## (e.g. a "struct" TypeKind will usually be transformed to a "map"
## RepresentationKind; "enum" TypeKind are always "string" RepresentationKind;
## and so on.)
##
## RepresentationKind strings are sometimes used to to indicate part of the
## definition in the details of Type; for example, they're used describing
## some of the detailed behaviors of a "kinded"-style union type.
type RepresentationKind enum {
	| "bool"
	| "string"
	| "bytes"
	| "int"
	| "float"
	| "map"
	| "list"
	| "link"
}

## TypeBool describes a simple boolean type.
## It has no details.
##
type TypeBool struct {}

## TypeString describes a simple string type.
## It has no details.
##
type TypeString struct {}

## TypeBytes describes a simple byte array type.
## It has no details.
##
type TypeBytes struct {}

## TypeInt describes a simple integer numeric type.
## It has no details.
##
type TypeInt struct {}

## TypeFloat describes a simple floating point numeric type.
## It has no details.
##
type TypeFloat struct {}

## TypeMap describes a key-value map.
## The keys and values of the map have some specific type of their own.
##
type TypeMap struct {
	# TODO
}

## TypeList describes a list.
## The values of the list have some specific type of their own.
##
type TypeList struct {
	# TODO
}

## TypeLink describes a hash linking to another object (a CID).
##
## REVIEW: this currently has no details... but possibly it should have a
## type hint for what we expect when resolving the link?
##
type TypeLink struct {}

## TypeUnion describes a union (sometimes called a "sum type", or
## more verbosely, a "discriminated union").
## A union is a type that can have a value of several different types, but
## unlike maps or structs, in a union only one of those values may be present
## at a time.
##
## Unions can be defined as representing in several different ways: "keyed",
## "envelop", or "inline" are all representations that become a map (some
## literature may describe this as "tagged" style unions), and a fourth style,
## "kinded" unions, may actually be any of the other representation kinds!
##
type TypeUnion struct {
	members UnionContent
}

type UnionContent union {
	# TODO
} representation keyed

## TypeStruct
type TypeStruct struct {
	# TODO
}

## TypeEnum
type TypeEnum struct {
	# TODO
}
